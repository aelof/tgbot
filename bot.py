#
# -*- coding: utf-8 -*-
import telebot
from telebot import types

import json
import requests
import config
from config import kb_getphone, kb_start, ikb1,manual, short, startmessage

tb = telebot.TeleBot(config.token)
URL_ED = config.URL_ED

#

@tb.message_handler(commands=['start', 'short', 'clear',  'god'])
def start(message):
    mci = message.chat.id
    if message.text == '/start':
        tb.send_message(mci, startmessage, parse_mode='Markdown', reply_markup=kb_start,
                        disable_web_page_preview=True)
    elif message.text == '/short':
        tb.send_message(mci, short, parse_mode='Markdown', reply_markup=kb_start)
    elif message.text == '/clear':
        for i in range(100):
            try:
                tb.delete_message(message.chat.id, message.message_id - i)  # delete all msgs
            except:
                i += 1
    if message.text == '/god':
        tb.send_message(mci, '\r\n\r\n/clear –†–µ–∂–∏–º –ë–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')

    # tracing new users / –æ—Ç—Å–ª–µ–¥–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
    if message.chat.username:
        analitic = {'type': 'savelog', 'chat_id': mci, 'nic': message.chat.username,
                    'firstname': message.chat.first_name, 'token': config.token_ed}
        if mci not in [405529066, 239090651]:
            tb.send_message('@new_visit', f'new:{message.chat.first_name},{message.chat.username};id = {mci}')

    else:
        analitic = {'type': 'savelog', 'chat_id': mci, 'firstname': message.chat.first_name, 'token': config.token_ed}
        if mci not in [405529066, 239090651]:
            tb.send_message('@new_visit', f'new:{message.chat.first_name}:{mci}')
    anal = requests.get(URL_ED, params=analitic)


# heandler phome number /–∑–∞–ø—Ä–∞–≤—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
@tb.message_handler(content_types=['contact', 'voice'])
def get_number(message):
    mci = message.chat.id
    global ttime
    global data_to_us
    if message.contact:
        ttime = message.date
        phone = message.contact.phone_number
        data_to_us = {'type': 'sendorder', 'chat_id': mci, 'phone': phone, 'token': config.token_ed}
        kbrd_voice = types.InlineKeyboardMarkup()
        btn1_voice = types.InlineKeyboardButton('–î–µ—Ç–∞–ª–µ–π –Ω–µ—Ç', callback_data='pass_voice')
        kbrd_voice.add(btn1_voice)
        tb.send_message(mci, '*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π*\r\n\r\n'
                             '(–º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –º—è—Å–∞ –∏–ª–∏ —Å—ã—Ä–∞ –í–∞–º –æ—Ç—Ä–µ–∑–∞—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å, –ø–æ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä)'
                             '\r\n\r\n_–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ_ *–ø–µ—Ä–≤–æ–µ* _–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ_',
                        parse_mode='Markdown', reply_markup=kbrd_voice)
        tb.delete_message(mci, message.message_id)
    if message.voice:
        ttime2 = message.date
        try:
            if ttime2 > ttime:
                tb.forward_message("@deliiivery", mci, message.message_id)
                tb.send_message(message.chat.id,
                                '*–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\r\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è c –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π*',
                                reply_markup=kb_start, parse_mode='Markdown')
                tb.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —É–ª—É—á—à–∏–º —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å!'
                                                 '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å'
                                                 '\r\n https://t.me/joinchat/AAAAAElAAlQ_waJRJmk8LQ')
                # requests.post(URL_ED, params=data_to_us)
        except:
            tb.send_message(mci, manual, parse_mode='Markdown')



# pass_voice
@tb.callback_query_handler(func=lambda call: call.data == 'pass_voice')
def voice(call):
    cmci = call.message.chat.id
    if call.data == 'pass_voice':
        # tb.delete_message(cmci, call.message.message_id)
        tb.send_message(cmci, '*–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\r\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è c –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π*',
                        reply_markup=kb_start, parse_mode='Markdown')
        tb.send_message(cmci, '–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º —Å–∞–º—É—é —É–¥–æ–±–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É!\r\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å '
                              '\r\n https://t.me/joinchat/AAAAAElAAlQ_waJRJmk8LQ')
        tb.answer_callback_query(call.id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!', show_alert=True)

        try:
            requests.post(URL_ED, params=data_to_us)
        except:
            pass


# erase shoping cart
@tb.callback_query_handler(func=lambda call: call.data == 'erase_cart')
def cart0(call):
    cmci = call.message.chat.id
    if call.data == 'erase_cart':
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                 text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–∞–µ—Ç—Å—è")

        tb.edit_message_text(chat_id=cmci, message_id=call.message.message_id,
                             text='–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=None)
        data_erase_cart = {'type': 'clearcart', 'chat_id': cmci, 'token': config.token_ed}
        z = requests.post(URL_ED, params=data_erase_cart)


# shoping cart / –ö–æ—Ä–∑–∏–Ω–∞
@tb.message_handler(func=lambda message: message.text == '–ö–æ—Ä–∑–∏–Ω–∞ üõí')
def shoping_cart(message):
    mci = message.chat.id
    kbrd_cart = types.InlineKeyboardMarkup()
    btn1_cart = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='erase_cart')
    btn2_cart = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å!", callback_data='offer', )
    kbrd_cart.add(btn1_cart, btn2_cart)
    global r_cart
    data_cart = {'type': 'getcart', 'chat_id': mci, 'token': config.token_ed}
    r_cart = requests.get(URL_ED, params=data_cart)
    r_cart = r_cart.json()
    if r_cart['products']:
        answer = '*–í–∞—à –∑–∞–∫–∞–∑:* \r\n\r\n'
        i = 1
        check = 0
        for id in r_cart['products']:
            product = r_cart['products'][id]
            check = check + product["price"]
            answer += f' {i}. {product["name"]} x {product["quantity"]}   \r\n\r*= {product["price"]}—Ä.*    \r\n\r\n'
            i += 1
        answer = f'{answer} \r\n –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: *{check} —Ä—É–±–ª–µ–π* '
        tb.send_message(mci, answer, parse_mode='Markdown', reply_markup=kbrd_cart)
    else:
        tb.send_message(mci, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\r\n–ó–∞–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å:)")


@tb.callback_query_handler(func=lambda call: call.data == 'offer')
def off_er(call):
    if r_cart['total_price'] > 1200:
        cmci = call.message.chat.id
        tb.answer_callback_query(callback_query_id=call.id, text='–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ', show_alert=False)
        tb.send_message(cmci, '*–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n'
                              '–Ω–∞–∂–º. *–ü–æ–¥–µ–ª–∏—Ç—å—Å—è* –Ω–∞ –∫–ª–∏–≤–∏–∞—Ç—É—Ä–µ\n\n',
                        parse_mode='Markdown', reply_markup=kb_getphone, )
        global mpd  # message with  phone number delete
        mpd = call.message.message_id + 1
        # tb.delete_message(call.message.chat.id, mpd)
    else:
        cmci = call.message.chat.id
        tb.answer_callback_query(callback_query_id=call.id, text='–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –º–µ–Ω—å—à–µ 1200', show_alert=False)
        kb_cats = types.InlineKeyboardMarkup(row_width=3)
        kb_cats.add(*ikb1)
        tb.send_message(cmci, '–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —á—Ç–æ–±—ã —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –±—ã–ª–∞ *–æ—Ç 1200 —Ä—É–±–ª–µ–π*',
                        parse_mode='Markdown', reply_markup=kb_cats, )


@tb.message_handler(content_types='text')
def show_categories(message):
    mci = message.chat.id

    if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã üçΩ':
        global ms1
        ms1 = message.message_id
        kb_cats = types.InlineKeyboardMarkup(row_width=3)
        kb_cats.add(*ikb1)
        tb.send_message(mci, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ *1200 —Ä—É–±–ª–µ–π.* \r\n\r\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \r\n  ",
                        parse_mode='Markdown', reply_markup=kb_cats)
    elif message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìô':
        tb.send_message(mci, manual, parse_mode='Markdown')
    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã üì±':
        tb.send_message(mci, contacts, parse_mode='Markdown', disable_web_page_preview=True)
    elif message.text == '< –í –º–µ–Ω—é':
        tb.send_message(mci, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\r\n–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ', reply_markup=kb_start)
    else:
        tb.send_message(mci, manual, parse_mode='Markdown')


# heandler for button "back to categories"
@tb.callback_query_handler(func=lambda call: call.data == 'back_to_cat')
def back_to_cat(call):
    cmci = call.message.chat.id
    if call.data == 'back_to_cat':
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        kb_cats = types.InlineKeyboardMarkup(row_width=3)
        kb_cats.add(*ikb1)
        try:
            tb.delete_message(cmci, message_id=mid)  # message index to delete
        except:
            pass
        tb.send_message(cmci, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=kb_cats)
        tb.answer_callback_query(call.id, '–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω', show_alert=False)


# heandler for all call
@tb.callback_query_handler(func=lambda call: True)
def show_inline(call):
    cmci = call.message.chat.id
    value_id = str(call.data)

    if 'cat' in value_id:
        tb.answer_callback_query(callback_query_id=call.id, text='–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ ', show_alert=False)
        data_products = {'type': 'products', 'token': config.token_ed}
        if 'offset' in value_id:
            # Was clicked on show more products
            value_params = value_id.split('|')
            cat_id = value_params[0].replace('cat', '')
            data_products['offset'] = value_params[1].replace('offset', '')
        else:
            # Was clicked on category
            cat_id = value_id.replace('cat', '')
        data_products['cat_id'] = cat_id
        kbrd_products = types.InlineKeyboardMarkup(row_width=2)
        r1 = requests.get(URL_ED, params=data_products)
        r1 = r1.json()
        for i in r1['products']:
            if i['weight'] != None:
                item = types.InlineKeyboardButton(f'{i["name"]}-{i["price"]}—Ä./{i["weight"]}–≥.',
                                                  callback_data="prod" + str(i["id"]))
            else:
                item = types.InlineKeyboardButton(f'{i["name"]} - {i["price"]}—Ä.',
                                                  callback_data="prod" + str(i["id"]))
            kbrd_products.add(item)

        if 'next_offset' in r1:
            # Category has more products let's' show them
            kb_showmore = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ‚û°',
                                                     callback_data='cat' + str(cat_id) + '|offset' + str(
                                                         r1['next_offset']))

        kbrd_back_to_cat = types.InlineKeyboardButton('‚¨Ö –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='back_to_cat')
        try:
            kbrd_products.add(kbrd_back_to_cat, kb_showmore)
        except:
            kbrd_products.add(kbrd_back_to_cat)
        global mid
        mid = call.message.message_id
        tb.edit_message_text(chat_id=cmci, message_id=call.message.message_id,
                             text=f'–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=kbrd_products)

    elif 'prod' in value_id:
        answer = f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É."  # –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {r1['total_price']} —Ä."
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                 text=answer)
        prod_id = value_id.replace('prod', '')
        data_addtocart = {'type': 'addtocart', 'chat_id': cmci, 'prod_id': prod_id, 'token': config.token_ed}
        r1 = requests.get(URL_ED, params=data_addtocart)
        r1 = r1.json()
        answer1 = f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {r1['total_price']} —Ä."

        tb.answer_callback_query(callback_query_id=call.id, show_alert=False, text=answer1)


# start bot
if __name__ == "__main__":
    tb.polling(none_stop=True)