# -*- coding: utf-8 -*-
# add processing of 'left' messages
# test usual kbrds
import telebot
from telebot import types

import json
import requests
import config

tb = telebot.TeleBot(config.token)
URL_ED = config.URL_ED


@tb.message_handler(commands=['start'])
def start(message):
    # buttons main menu
    kbrd_start = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1_start = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã       ')
    btn2_start = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ ')
    btn3_start = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
    kbrd_start.add(btn1_start)
    kbrd_start.add(btn3_start, btn2_start)
    mci = message.chat.id
    tb.send_message(mci, '–ë–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ì–µ–ª–µ–Ω–¥–∂–∏–∫—É.\n'
                         '\r\n–ü–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –≤ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∞–ª–∏—è—Ö.\n'
                         '\n\n_–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –µ–≥–æ —Ä–∞–±–æ—Ç–æ–π (–Ω–∞–∂–º–∏—Ç–µ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è?")_',
                    parse_mode='Markdown', reply_markup=kbrd_start)


# heandler phome nimber /–∑–∞–ø—Ä–∞–≤—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
@tb.message_handler(content_types=['contact'])
def get_number(message):

    mci = message.chat.id

    phone = message.contact.phone_number
    data_to_us = {'type': 'sendorder', 'chat_id': mci, 'phone': phone, 'token': config.token_ed}

    p = requests.post(URL_ED, params=data_to_us)
    kbrd_start2 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1_start = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã')
    btn2_start = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞')
    btn3_start = types.KeyboardButton('–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?')
    kbrd_start2.add(btn1_start, btn2_start, btn3_start)
    tb.send_message(message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! \n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π',
                    reply_markup=kbrd_start2)


# erase shoping cart
@tb.callback_query_handler(func=lambda call: call.data == 'erase_cart')
def cart0(call):
    if call.data == 'erase_cart':
        cmci = call.message.chat.id
        data_erase_cart = {'type': 'clearcart', 'chat_id': cmci, 'token': config.token_ed}
        z = requests.post(URL_ED, params=data_erase_cart)
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                 text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—â–∏—â–µ–Ω–∞")

        tb.edit_message_text(chat_id=cmci, message_id=call.message.message_id,
                             text='–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=None)


# shoping cart / –ö–æ—Ä–∑–∏–Ω–∞
@tb.message_handler(func=lambda message: message.text == '–ö–æ—Ä–∑–∏–Ω–∞')
def shoping_cart(message):
    kbrd_cart = types.InlineKeyboardMarkup()
    btn1_cart = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='erase_cart')
    btn2_cart = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å!", callback_data='offer', )
    kbrd_cart.add(btn1_cart, btn2_cart)

    mci = message.chat.id

    data_cart = {'type': 'getcart', 'chat_id': mci, 'token': config.token_ed}
    r_cart = requests.get(URL_ED, params=data_cart)
    r_cart = r_cart.json()
    if r_cart['products']:
        answer = '*–í–∞—à –∑–∞–∫–∞–∑:* \r\n\r\n'
        i = 1
        check = 0
        for id in r_cart['products']:
            product = r_cart['products'][id]
            check = check + product["price"]
            answer += f' {i}. {product["name"]}  \r\n \r*{product["price"]}—Ä.*  \r\n\r\n'
            i += 1
        answer = f'{answer} \r\n –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: *{check} —Ä—É–±–ª–µ–π* '
        tb.send_message(mci, answer, parse_mode='Markdown', reply_markup=kbrd_cart)
    else:
        tb.send_message(mci, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")


@tb.message_handler(content_types='text')
def show_categories(message):
    mci = message.chat.id
    if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã':
        kbrd_cats = types.InlineKeyboardMarkup(row_width=3)
        data_cat = {'type': 'categories', 'token': config.token_ed}
        r0 = requests.get(URL_ED, params=data_cat)
        list = []
        r0 = r0.json()
        for i in r0:
            item = types.InlineKeyboardButton(str(i['name']), callback_data='cat' + str(i['id']))
            list.append(item)
        item1 = types.InlineKeyboardButton('–ê–∫—Ü–∏–∏', callback_data='actions')
        list.append(item1)
        kbrd_cats.add(*list)
        tb.send_message(mci, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=kbrd_cats)
    elif message.text == '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?':
        tb.send_message(mci, '(–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)')
    elif message.text == '–ù–∞–∑–∞–¥':
        kbrd_start = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1_start = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã')
        btn2_start = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞')
        btn3_start = types.KeyboardButton('–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?')
        kbrd_start.add(btn1_start, btn2_start, btn3_start)
        tb.send_message(mci, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kbrd_start)
    else:
        tb.send_message(mci, '(–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)' )


# heandler for button "back to categories"
@tb.callback_query_handler(func=lambda call: call.data == 'back_to_cat')
def back_to_cat(call):
    cmci = call.message.chat.id
    try:
        tb.delete_message(cmci, message_id=mid2)  # message index to delete
        print("1")
    except:
        pass
    if call.data == 'back_to_cat':
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        kbrd_cats = types.InlineKeyboardMarkup(row_width=3)
        payload = {'type': 'categories', 'token': config.token_ed}
        r = requests.get(URL_ED, params=payload)
        r = r.json()
        list2 = []
        for i in r:
            item = types.InlineKeyboardButton(str(i['name']), callback_data='cat' + str(i['id']))
            list2.append(item)

        kbrd_cats.add(*list2)
        tb.send_message(cmci, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=kbrd_cats)
        try:
            tb.delete_message(cmci, message_id=mid) # message index to delete
            print(2)
        except:
            pass






# heandler for all call back
@tb.callback_query_handler(func=lambda call: True)
def show_inline(call):
    cmci = call.message.chat.id
    value_id = str(call.data)

    if 'cat' in value_id:
        data_products = {'type': 'products', 'token': config.token_ed}
        if 'offset' in value_id:
            # Was clicked on show more products
            value_params = value_id.split('|')
            cat_id = value_params[0].replace('cat', '')
            data_products['offset'] = value_params[1].replace('offset', '')
        else:
            # Was clicked on category
            cat_id = value_id.replace('cat', '')
        data_products['cat_id'] = cat_id

        kbrd_products = types.InlineKeyboardMarkup(row_width=2)
        r1 = requests.get(URL_ED, params=data_products)
        r1 = r1.json()
        list3 = []
        for i in r1['products']:
            if i['weight'] != None:
                item = types.InlineKeyboardButton(f'{i["name"]} - {i["price"]}—Ä/{i["weight"]}–≥—Ä',
                                                  callback_data="prod" + str(i["id"]))
            else:
                item = types.InlineKeyboardButton(f'{i["name"]} - {i["price"]}—Ä.', callback_data="prod" + str(i["id"]))
            kbrd_products.add(item)

        if 'next_offset' in r1:
            # Category has more products let's' show them
            kbrd_products.add(types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ...',
                                                         callback_data='cat' + str(cat_id) + '|offset' + str(
                                                             r1['next_offset'])))
        kbrd_back_to_cat = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"', callback_data='back_to_cat')
        kbrd_products.add(kbrd_back_to_cat)
        global mid
        mid = call.message.message_id
        tb.edit_message_text(chat_id=cmci, message_id=call.message.message_id,
                             text='–¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üëá: ', reply_markup=kbrd_products)

    elif 'prod' in value_id:
        prod_id = value_id.replace('prod', '')
        data_addtocart = {'type': 'addtocart', 'chat_id': cmci, 'prod_id': prod_id, 'token': config.token_ed}
        r1 = requests.get(URL_ED, params=data_addtocart)
        r1 = r1.json()
        if 'new_product_id' not in r1:
            answer = '–¢–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ'
        else:
            answer = f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É \n –∏—Ç–æ–≥–æ: {r1['total_price']} —Ä. "
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                 text=answer)

    if call.data == 'offer':
        kbrd_getphone = types.ReplyKeyboardMarkup(resize_keyboard=1)
        btn1_getphone = types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True)
        btn2_getphone = types.KeyboardButton('–ù–∞–∑–∞–¥')
        kbrd_getphone.add(btn1_getphone, btn2_getphone)
        tb.send_message(cmci, '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º', reply_markup=kbrd_getphone)
        kbrd_start = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    if call.data == 'actions':
        global mid2

        kbrd_products2 = types.InlineKeyboardMarkup()
        kbrd_back_to_cat = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"', callback_data='back_to_cat')
        kbrd_products2.add(kbrd_back_to_cat)
        tb.edit_message_text(text='–¢–æ–≤–∞—Ä—ã –ø–æ –¥–µ—à—ë–≤–∫–µ',chat_id=cmci,message_id=call.message.message_id, reply_markup=kbrd_products2)
        mid2 = call.message.message_id


tb.polling(none_stop=True)