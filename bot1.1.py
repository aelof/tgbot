# -*- coding: utf-8 -*-

import telebot
from telebot import types

import json
import requests
import config

tb = telebot.TeleBot(config.token)
URL_ED = config.URL_ED

manual = '''
*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\r\n
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º. –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞. \r\n
–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ç–∞–∫–æ–π –∂–µ —Ç–æ–≤–∞—Ä - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –µ—â—ë —Ä–∞–∑ .\r\n
–í–µ—Å—å –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∂–∞–≤. *–ö–æ—Ä–∑–∏–Ω–∞* üß∫
–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ - –Ω–∞–∂–º. *–∑–∞–∫–∞–∑–∞—Ç—å*, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ
–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ 
—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–æ–ø—Ä–∞–≤–æ–∫ –≤ –∑–∞–∫–∞–∑ _–Ω–∞–ø—Ä. "–û—Ç—Ä–µ–∂—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,  350 –≥—Ä. —Å—ã—Ä–∞ "–ß–µ—Ä–Ω—ã–π –ü—Ä–∏–Ω—Ü!" 
(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ—Ç 1 –∫–≥.)_
\r\n–í–æ—Ç –∏ –≤—Å—ë –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –î–∞–ª–µ–µ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏. 
\r\n/short - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–∫—Ä—â–µ–Ω–∏—è
'''
startmessage = '''
–ë–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ üöô –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ì–µ–ª–µ–Ω–¥–∂–∏–∫—É.\n
–ü–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–º–æ–π üè†
–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ–∫–∞ –º–∞–ª, –Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è !\n
_–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –µ–≥–æ —Ä–∞–±–æ—Ç–æ–π (–Ω–∞–∂–º."–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")_',
'''
short = '''
*–°–æ–∫—Ä–∞—â–µ–Ω–∏—è:*
–±/–∫ - –±–µ–∑ –∫–æ—Å—Ç–∏
c/–º - —Å–≤–µ–∂–µ–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ
–ø–æ–¥–±–µ–¥. - –ø–æ–¥–±–µ–¥–µ—Ä–æ–∫
'''


@tb.message_handler(commands=['start', 'short'])
def start(message):
    # buttons main menu
    kbrd_start = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1_start = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã üçΩ')
    btn2_start = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
    btn3_start = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìï')
    kbrd_start.add(btn1_start)
    kbrd_start.add(btn3_start, btn2_start)
    mci = message.chat.id
    if message.text == '/start':
        tb.send_message(mci, startmessage, parse_mode='Markdown', reply_markup=kbrd_start)
    elif message.text == '/short':
        tb.send_message(mci, short, parse_mode='Markdown', reply_markup=kbrd_start)


# heandler phome nimber /–∑–∞–ø—Ä–∞–≤—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
@tb.message_handler(content_types=['contact', 'voice'])
def get_number(message):
    mci = message.chat.id
    global ttime
    if message.contact:
        ttime = message.date
        phone = message.contact.phone_number
        global data_to_us
        data_to_us = {'type': 'sendorder', 'chat_id': mci, 'phone': phone, 'token': config.token_ed}
        kbrd_voice = types.InlineKeyboardMarkup()
        btn1_voice = types.InlineKeyboardButton('–î–µ—Ç–∞–ª–µ–π –Ω–µ—Ç', callback_data='pass_voice')
        kbrd_voice.add(btn1_voice)
        tb.send_message(mci, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π\r\n\r\n'
                             '(–º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –º—è—Å–∞ –∏–ª–∏ —Å—ã—Ä–∞ –í–∞–º –æ—Ç—Ä–µ–∑–∞—Ç—å –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏)'
                             '\r\n\r\n_–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ_ *–ø–µ—Ä–≤–æ–µ* _–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ_',
                        parse_mode='Markdown', reply_markup=kbrd_voice)
    if message.voice:
        ttime2 = message.date
        try:
            if ttime:
                if ttime2 > ttime:
                    kbrd_start2 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    btn1_start = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã üçΩ')
                    btn2_start = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ üß∫ ')
                    btn3_start = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìï')
                    kbrd_start2.add(btn1_start)
                    kbrd_start2.add(btn3_start, btn2_start)
                    tb.forward_message("@deliiivery", mci, message.message_id)
                    tb.send_message(message.chat.id, '*–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\r\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è c –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π*',
                                    reply_markup=kbrd_start2, parse_mode='Markdown')
                    tb.send_message(call.message.chat.id, '–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —É–ª—É—á—à–∏–º —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å!'
                                                          '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å'
                                                          '\r\n https://t.me/joinchat/AAAAAElAAlQ_waJRJmk8LQ')
                    p = requests.post(URL_ED, params=data_to_us)
        except:
            tb.send_message(mci, manual, parse_mode='Markdown')


# pass_voice
@tb.callback_query_handler(func=lambda call: call.data == 'pass_voice')
def voice(call):
    if call.data == 'pass_voice':
        tb.delete_message(call.message.chat.id, call.message.message_id)
        kbrd_start2 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1_start = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã üçΩ')
        btn2_start = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
        btn3_start = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìï')
        kbrd_start2.add(btn1_start)
        kbrd_start2.add(btn3_start, btn2_start)
        tb.send_message(call.message.chat.id, '*–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\r\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è c –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π*',
                        reply_markup=kbrd_start2, parse_mode='Markdown')
        tb.send_message(call.message.chat.id, '–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —É–ª—É—á—à–∏–º —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å!'
                                              '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å'
                                              '\r\n https://t.me/joinchat/AAAAAElAAlQ_waJRJmk8LQ')

        try:
            p = requests.post(URL_ED, params=data_to_us)
        except:
            pass

# erase shoping cart
@tb.callback_query_handler(func=lambda call: call.data == 'erase_cart')
def cart0(call):
    if call.data == 'erase_cart':
        cmci = call.message.chat.id
        data_erase_cart = {'type': 'clearcart', 'chat_id': cmci, 'token': config.token_ed}
        z = requests.post(URL_ED, params=data_erase_cart)
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                 text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—â–∏—â–µ–Ω–∞")

        tb.edit_message_text(chat_id=cmci, message_id=call.message.message_id,
                             text='–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=None)


# shoping cart / –ö–æ—Ä–∑–∏–Ω–∞
@tb.message_handler(func=lambda message: message.text == '–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
def shoping_cart(message):
    kbrd_cart = types.InlineKeyboardMarkup()
    btn1_cart = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='erase_cart')
    btn2_cart = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å!", callback_data='offer', )
    kbrd_cart.add(btn1_cart, btn2_cart)
    mci = message.chat.id
    data_cart = {'type': 'getcart', 'chat_id': mci, 'token': config.token_ed}
    r_cart = requests.get(URL_ED, params=data_cart)
    r_cart = r_cart.json()
    if r_cart['products']:
        answer = '*–í–∞—à –∑–∞–∫–∞–∑:* \r\n\r\n'
        i = 1
        check = 0
        for id in r_cart['products']:
            product = r_cart['products'][id]
            check = check + product["price"]
            answer += f' {i}. {product["name"]} x {product["quantity"]}   \r\n\r*= {product["price"]}—Ä.*    \r\n\r\n'
            i += 1
        answer = f'{answer} \r\n –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: *{check} —Ä—É–±–ª–µ–π* '
        tb.send_message(mci, answer, parse_mode='Markdown', reply_markup=kbrd_cart)
    else:
        tb.send_message(mci, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\r\n–ó–∞–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å:)")


@tb.message_handler(content_types='text')
def show_categories(message):
    mci = message.chat.id
    if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã üçΩ':
        kbrd_cats = types.InlineKeyboardMarkup(row_width=3)
        data_cat = {'type': 'categories', 'token': config.token_ed}
        r0 = requests.get(URL_ED, params=data_cat)
        list = []
        r0 = r0.json()
        for i in r0:
            item = types.InlineKeyboardButton(str(i['name']), callback_data='cat' + str(i['id']))
            list.append(item)
        kbrd_cats.add(*list)
        tb.send_message(mci, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ *1200 —Ä—É–±–ª–µ–π.* \r\n\r\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \r\n  ",
                        parse_mode='Markdown', reply_markup=kbrd_cats)
    elif message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìï':
        tb.send_message(mci, manual, parse_mode='Markdown')
    elif message.text == '–ù–∞–∑–∞–¥':
        kbrd_start = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1_start = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã üçΩ')
        btn2_start = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
        btn3_start = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìï')
        kbrd_start.add(btn1_start)
        kbrd_start.add(btn3_start, btn2_start)
        tb.send_message(mci, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\r\n–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞', reply_markup=kbrd_start)
    else:
        tb.send_message(mci, manual, parse_mode='Markdown')


# heandler for button "back to categories"
@tb.callback_query_handler(func=lambda call: call.data == 'back_to_cat')
def back_to_cat(call):
    cmci = call.message.chat.id
    if call.data == 'back_to_cat':
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        kbrd_cats = types.InlineKeyboardMarkup(row_width=3)
        payload = {'type': 'categories', 'token': config.token_ed}
        r = requests.get(URL_ED, params=payload)
        r = r.json()
        list2 = []
        for i in r:
            item = types.InlineKeyboardButton(str(i['name']), callback_data='cat' + str(i['id']))
            list2.append(item)
        kbrd_cats.add(*list2)
        try:
            tb.delete_message(cmci, message_id=mid)  # message index to delete
        except:
            pass
        tb.send_message(cmci, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=kbrd_cats)


# heandler for all call back
@tb.callback_query_handler(func=lambda call: True)
def show_inline(call):
    cmci = call.message.chat.id
    value_id = str(call.data)

    if 'cat' in value_id:
        data_products = {'type': 'products', 'token': config.token_ed}
        if 'offset' in value_id:
            # Was clicked on show more products
            value_params = value_id.split('|')
            cat_id = value_params[0].replace('cat', '')
            data_products['offset'] = value_params[1].replace('offset', '')
        else:
            # Was clicked on category
            cat_id = value_id.replace('cat', '')
        data_products['cat_id'] = cat_id
        kbrd_products = types.InlineKeyboardMarkup(row_width=2)
        r1 = requests.get(URL_ED, params=data_products)
        r1 = r1.json()
        for i in r1['products']:
            if i['weight'] != None:
                item = types.InlineKeyboardButton(f'{i["name"]}-{i["price"]}—Ä./{i["weight"]}–≥.',
                                                  callback_data="prod" + str(i["id"]))
            else:
                item = types.InlineKeyboardButton(f'{i["name"]} - {i["price"]}—Ä.', callback_data="prod" + str(i["id"]))
            kbrd_products.add(item)

        if 'next_offset' in r1:
            # Category has more products let's' show them
            kbrd_products.add(types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë ‚û°Ô∏è',
                                                         callback_data='cat' + str(cat_id) + '|offset' + str(
                                                             r1['next_offset'])))
        kbrd_back_to_cat = types.InlineKeyboardButton('‚¨ÖÔ∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='back_to_cat')
        kbrd_products.add(kbrd_back_to_cat)
        global mid
        mid = call.message.message_id
        tb.edit_message_text(chat_id=cmci, message_id=call.message.message_id,
                             text=f'\r\n–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\r\n\r\n\r\n',
                             # *{namecat(value_id)} \r\n*_—Ä—É–±/–∫–≥(—à—Ç)_ ',
                             parse_mode='Markdown', reply_markup=kbrd_products)

    elif 'prod' in value_id:
        prod_id = value_id.replace('prod', '')
        data_addtocart = {'type': 'addtocart', 'chat_id': cmci, 'prod_id': prod_id, 'token': config.token_ed}
        r1 = requests.get(URL_ED, params=data_addtocart)
        r1 = r1.json()
        if 'new_product_id' not in r1:
            answer = '–¢–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ'
        else:
            answer = f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {r1['total_price']} —Ä."
        tb.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                 text=answer)

    if call.data == 'offer':
        kbrd_getphone = types.ReplyKeyboardMarkup(resize_keyboard=1, one_time_keyboard=True)
        btn1_getphone = types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ', request_contact=True)
        btn2_getphone = types.KeyboardButton('–ù–∞–∑–∞–¥')
        kbrd_getphone.add(btn2_getphone, btn1_getphone)
        tb.send_message(cmci, '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º\n\n'
                              '_(–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏)_', parse_mode='Markdown',
                        reply_markup=kbrd_getphone, )
        kbrd_start = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)


# start bot

tb.polling(none_stop=True)
